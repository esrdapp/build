{"version":3,"sources":["configs/themeConfig.js","assets/images/logo/logo.png","store/reducers/auth/index.js","store/reducers/navbar/index.js","store/reducers/Status/index.js","store/reducers/auth/actions.js","store/reducers/layout/index.js","store/reducers/rootReducer.js","store/index.js","utility/context/ThemeColors.js","@core/components/spinner/Fallback-spinner.js","@core/components/ripple-button/index.js","serviceWorker.js","index.js","store/consts/auth.js","store/consts/layout.js","store/consts/navbar.js"],"names":["themeConfig","app","appName","appLogoImage","require","default","layout","isRTL","skin","routerTransition","type","contentWidth","menu","isHidden","isCollapsed","navbar","backgroundColor","footer","customizer","scrollTop","REGISTER_REQUEST","authConsts","REGISTER_SUCCESS","REGISTER_FAILURE","initialState","isAuthed","user","authReducer","state","payload","LOG_IN","LOG_OUT","SET_AUTH","UPDATE_USER","updatedUser","UPDATE_ONLINE_STATUS","isOnline","HANDLE_SEARCH_QUERY","navbarConsts","GET_BOOKMARKS","UPDATE_BOOKMARKED","suggestions","bookmarks","query","navbarReducer","action","val","data","objectToUpdate","find","item","id","isBookmarked","bookmarkIndex","findIndex","x","push","splice","IS_SIGN_SUCCESS","IS_SIGN_FAILD","initalState","IsSignInSuccess","IsSignInFaild","NOT_FOUND_USER","HANDLE_CONTENT_WIDTH","layoutConsts","HANDLE_MENU_COLLAPSED","HANDLE_MENU_HIDDEN","HANDLE_RTL","menuCollapsed","window","localStorage","getItem","JSON","parse","initialMenuCollapsed","menuHidden","err","layoutReducer","value","setItem","rootReducer","combineReducers","auth","status","middleware","thunk","createDebounce","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ThemeColors","createContext","ThemeContext","children","useState","colors","setColors","useEffect","getHex","color","getComputedStyle","document","body","getPropertyValue","trim","obj","primary","light","concat","main","secondary","success","danger","warning","info","dark","Provider","SpinnerComponent","className","src","logo","alt","width","Button","Ripple","onClick","rest","mounted","setMounted","isRippling","setIsRippling","y","coords","setCoords","setTimeout","classnames","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","style","Boolean","location","hostname","match","LazyApp","lazy","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","chainId","fallback","newestOnTop","getElementById","navigator","serviceWorker","ready","then","registration","unregister","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","RESETPASSWORD_REQUEST","RESETPASSWORD_SUCCESS","RESETPASSWORD_FAILURE"],"mappings":"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","file":"static/js/main.01228bda.chunk.js","sourcesContent":["// You can customize the template with the help of this file\n\n//Template config options\nconst themeConfig = {\n  app: {\n    appName: 'ESportsRef',\n    appLogoImage: require('@src/assets/images/logo/logo.png').default\n  },\n  layout: {\n    isRTL: false,\n    skin: 'dark', // light, dark, bordered, semi-dark\n    routerTransition: 'fadeIn', // fadeIn, fadeInLeft, zoomIn, none or check this for more transition https://animate.style/\n    type: 'vertical', // vertical, horizontal\n    contentWidth: 'full', // full, boxed\n    menu: {\n      isHidden: true,\n      isCollapsed: false\n    },\n    navbar: {\n      // ? For horizontal menu, navbar type will work for navMenu type\n      type: 'sticky', // static , sticky , floating, hidden\n      backgroundColor: 'white' // BS color options [primary, success, etc]\n    },\n    footer: {\n      type: 'static' // static, sticky, hidden\n    },\n    customizer: false,\n    scrollTop: true // Enable scroll to top button\n  }\n}\n\nexport default themeConfig\n","export default __webpack_public_path__ + \"static/media/logo.2ad8792e.png\";","import { authConsts } from '../../consts'\n\nconst {\n  REGISTER_REQUEST,\n  REGISTER_SUCCESS,\n  REGISTER_FAILURE\n} = authConsts\n\n// **  Initial State\nconst initialState = {\n  isAuthed: false,\n  user: {}\n}\n\nconst authReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case authConsts.LOG_IN:\n      return {\n        ...state,\n        user: payload.user\n      }\n    \n    case authConsts.LOG_OUT:\n      return { user: {}, isAuthed: false }\n    \n    case 'FORGOT_PASSWORD':\n      return {\n        ...state\n        \n      }\n\n    case REGISTER_REQUEST:\n      return {}\n\n    case REGISTER_SUCCESS:\n      return {}\n    \n    case REGISTER_FAILURE:\n      return {}\n\n    case authConsts.SET_AUTH:\n      return {\n        ...state,\n        isAuthed: payload.isAuthed\n      }\n    \n    case authConsts.UPDATE_USER:\n      return {\n        ...state,\n        user: payload.updatedUser\n      }\n\n    case authConsts.UPDATE_ONLINE_STATUS:\n      state.user.isOnline = payload.isOnline\n      return {\n        ...state\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default authReducer\n","import { navbarConsts } from '../../consts'\n\nconst { \n  HANDLE_SEARCH_QUERY, \n  GET_BOOKMARKS, \n  UPDATE_BOOKMARKED\n} = navbarConsts\n\n// ** Initial State\nconst initialState = {\n  suggestions: [],\n  bookmarks: [],\n  query: ''\n}\n\nconst navbarReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HANDLE_SEARCH_QUERY:\n      return { ...state, query: action.val }\n    case HANDLE_SEARCH_QUERY:\n      return { ...state, suggestions: action.data, bookmarks: action.bookmarks }\n    case HANDLE_SEARCH_QUERY:\n      let objectToUpdate\n\n      // ** find & update object\n      state.suggestions.find(item => {\n        if (item.id === action.id) {\n          item.isBookmarked = !item.isBookmarked\n          objectToUpdate = item\n        }\n      })\n\n      // ** Get index to add or remove bookmark from array\n      const bookmarkIndex = state.bookmarks.findIndex(x => x.id === action.id)\n\n      if (bookmarkIndex === -1) {\n        state.bookmarks.push(objectToUpdate)\n      } else {\n        state.bookmarks.splice(bookmarkIndex, 1)\n      }\n\n      return { ...state }\n    default:\n      return state\n  }\n}\n\nexport default navbarReducer\n","const IS_SIGN_SUCCESS = 'IS_SIGN_SUCCESS'\nconst IS_SIGN_FAILD = 'IS_SIGN_FAILD'\n\nconst initalState = {\n    IsSignInSuccess: false,\n    IsSignInFaild: false\n    //...\n}\n\nexport const isSignInSuccessAction = () => ({type: IS_SIGN_SUCCESS})\nexport const isSignInFaildAction = () => ({type: IS_SIGN_FAILD})\n\nexport const statusReducer = (state = initalState, action) => {\n    switch (action) {\n        case IS_SIGN_SUCCESS:\n            return {...state, IsSignInSuccess: true}\n        case IS_SIGN_FAILD:\n            return {...state, IsSignInFaild: true}\n        \n        default:\n            return state\n\n    }\n} \n\n","export const SIGN_IN_REQUEST = 'SIGN_IN_REQUEST'\nexport const SIGN_IN = 'SIGN_IN'\nexport const NOT_FOUND_USER = 'NOT_FOUND_USER'\nexport const SIGN_OUT = 'SIGN_OUT'\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST'\n\n// import UserService from '../../../services/UserServicesss'\nimport { isSignInFaildAction, isSignInSuccessAction } from '../Status'\n\nexport const signinAction = (user) => ({ type: SIGN_IN, payload: { user } })\nexport const signinRequestAction = (email, password) => {\n    return (dispatch) => {\n        // UserService.find({email, password})\n        //     .then(user => {\n        //         dispatch(isSignInSuccessAction())\n        //         dispatch(signinAction(user))\n        //     })\n        //     .catch(() => {\n        //         dispatch(isSignInFaildAction())\n        //         // eslint-disable-next-line no-use-before-define\n        //         dispatch(notFoundUserAction())\n        //     })\n    }\n}\n\nexport const notFoundUserAction = () => ({type: NOT_FOUND_USER})\n\nexport const signupRequestAction = (user) => {\n    return (dispatch) => {\n        // UserService.create(user)\n        //     .then(user => {\n        //         dispatch(signinAction(user))\n        //     })\n        //     .catch(error => {\n        //         console.log(error)\n        //     })\n    }\n}\n\n","// ** ThemeConfig Import\nimport themeConfig from '@configs/themeConfig'\nimport { NOT_FOUND_USER } from '../auth/actions'\nimport { layoutConsts } from '../../consts'\n\nconst {\n  HANDLE_CONTENT_WIDTH, \n  HANDLE_MENU_COLLAPSED,\n  HANDLE_MENU_HIDDEN,\n  HANDLE_RTL\n} = layoutConsts\n\n// ** Returns Initial Menu Collapsed State\nconst initialMenuCollapsed = () => {\n  const item = window.localStorage.getItem('menuCollapsed')\n  //** Parse stored json or if none return initialValue\n  return item ? JSON.parse(item) : themeConfig.layout.menu.isCollapsed\n}\n\n// ** Initial State\nconst initialState = {\n  isRTL: themeConfig.layout.isRTL,\n  menuCollapsed: initialMenuCollapsed(),\n  menuHidden: themeConfig.layout.menu.isHidden,\n  contentWidth: themeConfig.layout.contentWidth,\n  err: null\n}\n\nconst layoutReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HANDLE_CONTENT_WIDTH:\n      return { ...state, contentWidth: action.value }\n    case HANDLE_MENU_COLLAPSED:\n      window.localStorage.setItem('menuCollapsed', action.value)\n      return { ...state, menuCollapsed: action.value }\n    case HANDLE_MENU_HIDDEN:\n      return { ...state, menuHidden: action.value }\n    case HANDLE_RTL:\n      return { ...state, isRTL: action.value }\n    case NOT_FOUND_USER: \n      return { ...state, err: 'noteFoundUser'}\n    default:\n      return state\n  }\n}\n\nexport default layoutReducer\n","// ** Redux Imports\nimport { combineReducers } from 'redux'\n\n// ** Reducers Imports\nimport auth from './auth'\nimport navbar from './navbar'\nimport layout from './layout'\nimport { statusReducer as status } from './Status'\n\nconst rootReducer = combineReducers({\n  auth,\n  navbar,\n  layout,\n  status\n})\n\nexport default rootReducer\n","// ** Redux, Thunk & Root Reducer Imports\nimport thunk from 'redux-thunk'\nimport createDebounce from 'redux-debounced'\nimport rootReducer from './reducers/rootReducer'\nimport { createStore, applyMiddleware, compose } from 'redux'\n\n// ** init middleware\nconst middleware = [thunk, createDebounce()]\n\n// ** Dev Tools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n// ** Create store\nconst store = createStore(rootReducer, {}, composeEnhancers(applyMiddleware(...middleware)))\n\nexport { store }","// ** React Imports\nimport { useEffect, useState, createContext } from 'react'\n\n// ** Create Context\nconst ThemeColors = createContext()\n\nconst ThemeContext = ({ children }) => {\n  // ** State\n  const [colors, setColors] = useState({})\n\n  //** ComponentDidMount\n  useEffect(() => {\n    if (window !== 'undefined') {\n      //** Get variable value\n      const getHex = color => window.getComputedStyle(document.body).getPropertyValue(color).trim()\n\n      //** Colors obj\n      const obj = {\n        primary: {\n          light: getHex('--primary').concat('1a'),\n          main: getHex('--primary')\n        },\n        secondary: {\n          light: getHex('--secondary').concat('1a'),\n          main: getHex('--secondary')\n        },\n        success: {\n          light: getHex('--success').concat('1a'),\n          main: getHex('--success')\n        },\n        danger: {\n          light: getHex('--danger').concat('1a'),\n          main: getHex('--danger')\n        },\n        warning: {\n          light: getHex('--warning').concat('1a'),\n          main: getHex('--warning')\n        },\n        info: {\n          light: getHex('--info').concat('1a'),\n          main: getHex('--info')\n        },\n        dark: {\n          light: getHex('--dark').concat('1a'),\n          main: getHex('--dark')\n        }\n      }\n\n      setColors({ ...obj })\n    }\n  }, [])\n\n  return <ThemeColors.Provider value={{ colors }}>{children}</ThemeColors.Provider>\n}\n\nexport { ThemeColors, ThemeContext }\n","// ** Logo\nimport logo from '@src/assets/images/logo/logo.png'\n\nconst SpinnerComponent = () => {\n  return (\n    <div className='fallback-spinner vh-100'>\n      <img className='fallback-logo' src={logo} alt='logo' width={120} />\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default SpinnerComponent\n","// ** React Imports\nimport { useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport { Button } from 'reactstrap'\nimport classnames from 'classnames'\n\n// ** Styles\nimport './ripple-button.scss'\n\nconst RippleButton = ({ className, children, onClick, ...rest }) => {\n  // ** States\n  const [mounted, setMounted] = useState(false)\n  const [isRippling, setIsRippling] = useState(false)\n  const [coords, setCoords] = useState({ x: -1, y: -1 })\n\n  // ** Toggle mounted on mount & unmount\n  useEffect(() => {\n    setMounted(true)\n    return () => setMounted(false)\n  }, [])\n\n  // ** Check for coords and set ripple\n  useEffect(() => {\n    if (mounted) {\n      if (coords.x !== -1 && coords.y !== -1) {\n        setIsRippling(true)\n        setTimeout(() => setIsRippling(false), 500)\n      } else {\n        setIsRippling(false)\n      }\n    }\n  }, [coords])\n\n  // ** Reset Coords on ripple end\n  useEffect(() => {\n    if (mounted) {\n      if (!isRippling) setCoords({ x: -1, y: -1 })\n    }\n  }, [isRippling])\n\n  return (\n    <Button\n      className={classnames('waves-effect', {\n        [className]: className\n      })}\n      onClick={e => {\n        const rect = e.target.getBoundingClientRect()\n        setCoords({ x: e.clientX - rect.left, y: e.clientY - rect.top })\n        if (onClick) {\n          onClick(e)\n        }\n      }}\n      {...rest}\n    >\n      {children}\n      {isRippling ? (\n        <span\n          className='waves-ripple'\n          style={{\n            left: coords.x,\n            top: coords.y\n          }}\n        ></span>\n      ) : null}\n    </Button>\n  )\n}\n\n// ** PropTypes\nRippleButton.propTypes = {\n  ...Button.propTypes\n}\n\nButton.Ripple = RippleButton\n","/*eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType !== null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","// ** React Imports\nimport { Suspense, lazy } from 'react'\nimport ReactDOM from 'react-dom'\n\n// ** Use Wallet\nimport { UseWalletProvider } from 'use-wallet'\n\n// ** Redux Imports\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\n// ** Toast & ThemeColors Context\nimport { ToastContainer } from 'react-toastify'\nimport { ThemeContext } from './utility/context/ThemeColors'\n\n// ** Spinner (Splash Screen)\nimport Spinner from './@core/components/spinner/Fallback-spinner'\n\n// ** Ripple Button\nimport './@core/components/ripple-button'\n\n// ** PrismJS\nimport 'prismjs'\nimport 'prismjs/themes/prism-tomorrow.css'\nimport 'prismjs/components/prism-jsx.min'\n\n// ** React Perfect Scrollbar\nimport 'react-perfect-scrollbar/dist/css/styles.css'\n\n// ** React Toastify\nimport '@styles/react/libs/toastify/toastify.scss'\n\n// ** Core styles\nimport './@core/assets/fonts/feather/iconfont.css'\nimport './@core/scss/core.scss'\nimport './assets/scss/style.scss'\n\n// ** Service Worker\nimport * as serviceWorker from './serviceWorker'\n\n// ** Lazy load app\nconst LazyApp = lazy(() => import('./App'))\n\n// ** Firebase\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport 'firebase/database'\nimport 'firebase/storage'\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nReactDOM.render(\n  <UseWalletProvider chainId={100}>\n    <Provider store={store}>\n      <Suspense fallback={<Spinner />}>\n        <ThemeContext>\n          <LazyApp />\n          <ToastContainer newestOnTop />\n        </ThemeContext>\n      </Suspense>\n    </Provider>\n  </UseWalletProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","export const authConsts = {\n  LOG_IN: 'LOG_IN',\n  LOG_OUT: 'LOG_OUT',\n\n  REGISTER_REQUEST: 'REGISTER_REQUEST',\n  REGISTER_SUCCESS: 'REGISTER_SUCCESS',\n  REGISTER_FAILURE: 'REGISTER_FAILURE',\n\n  LOGIN_REQUEST: 'LOGIN_REQUEST',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'LOGIN_FAILURE',\n\n  LOGOUT: 'USERS_LOGOUT',\n\n  RESETPASSWORD_REQUEST: 'RESETPASSWORD_REQUEST',\n  RESETPASSWORD_SUCCESS: 'RESETPASSWORD_SUCCESS',\n  RESETPASSWORD_FAILURE: 'RESETPASSWORD_FAILURE',\n\n  SET_AUTH: 'SET_AUTH',\n  UPDATE_USER: 'UPDATE_USER',\n  UPDATE_ONLINE_STATUS: 'UPDATE_ONLINE_STATUS'\n}","export const layoutConsts = {\n  HANDLE_CONTENT_WIDTH:  'HANDLE_CONTENT_WIDTH',\n  HANDLE_MENU_COLLAPSED: 'HANDLE_MENU_COLLAPSED',\n  HANDLE_MENU_HIDDEN:    'HANDLE_MENU_HIDDEN',\n  HANDLE_RTL:            'HANDLE_RTL'\n}","export const navbarConsts = {\n  GET_BOOKMARKS:        'GET_BOOKMARKS',\n  UPDATE_BOOKMARKED:    'UPDATE_BOOKMARKED',\n  HANDLE_SEARCH_QUERY:  'HANDLE_SEARCH_QUERY'\n}"],"sourceRoot":""}